{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOXeEqWqfBOSrPqxoQ1XnqH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Noralma-creator/USERNAME/blob/master/tictactoe\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2XPry2-xols3",
        "outputId": "1de2ef06-5dcc-48b9-9af6-25ae2260b361"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  |   |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "Turno del jugador: X\n",
            "Introduce tu movimiento (fila columna): 2 1\n",
            "  |   |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "  | X |  \n",
            "-----\n",
            "Turno del jugador: O\n",
            "La IA está pensando...\n",
            "La IA juega en 0 1\n",
            "  | O |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "  | X |  \n",
            "-----\n",
            "Turno del jugador: X\n"
          ]
        }
      ],
      "source": [
        "import math\n",
        "\n",
        "X = \"X\"\n",
        "O = \"O\"\n",
        "EMPTY = None\n",
        "\n",
        "def initial_state():\n",
        "    \"\"\"Devuelve el estado inicial del tablero.\"\"\"\n",
        "    return [[EMPTY, EMPTY, EMPTY],\n",
        "            [EMPTY, EMPTY, EMPTY],\n",
        "            [EMPTY, EMPTY, EMPTY]]\n",
        "\n",
        "\n",
        "def player(board):\n",
        "    \"\"\"Devuelve el jugador que tiene el turno actual (X o O).\"\"\"\n",
        "    x_count = sum(row.count(X) for row in board)\n",
        "    o_count = sum(row.count(O) for row in board)\n",
        "    return X if x_count <= o_count else O\n",
        "\n",
        "\n",
        "def actions(board):\n",
        "    \"\"\"Devuelve un conjunto de todas las acciones posibles (i, j) en el tablero.\"\"\"\n",
        "    return {(i, j) for i in range(3) for j in range(3) if board[i][j] == EMPTY}\n",
        "\n",
        "\n",
        "def result(board, action):\n",
        "    \"\"\"Devuelve el tablero que resulta al aplicar la acción al tablero actual.\"\"\"\n",
        "    i, j = action\n",
        "    if board[i][j] != EMPTY:\n",
        "        raise ValueError(\"Movimiento inválido: la celda no está vacía.\")\n",
        "    new_board = [row[:] for row in board]  # Copia profunda del tablero.\n",
        "    new_board[i][j] = player(board)\n",
        "    return new_board\n",
        "\n",
        "\n",
        "def winner(board):\n",
        "    \"\"\"Devuelve el ganador del juego si lo hay, de lo contrario devuelve None.\"\"\"\n",
        "    for i in range(3):  # Verificar filas y columnas\n",
        "        if board[i][0] == board[i][1] == board[i][2] != EMPTY:\n",
        "            return board[i][0]\n",
        "        if board[0][i] == board[1][i] == board[2][i] != EMPTY:\n",
        "            return board[0][i]\n",
        "    # Verificar diagonales\n",
        "    if board[0][0] == board[1][1] == board[2][2] != EMPTY:\n",
        "        return board[0][0]\n",
        "    if board[0][2] == board[1][1] == board[2][0] != EMPTY:\n",
        "        return board[0][2]\n",
        "    return None\n",
        "\n",
        "\n",
        "def terminal(board):\n",
        "    \"\"\"Devuelve True si el juego ha terminado, de lo contrario False.\"\"\"\n",
        "    return winner(board) is not None or all(cell != EMPTY for row in board for cell in row)\n",
        "\n",
        "\n",
        "def utility(board):\n",
        "    \"\"\"Devuelve 1 si X gana, -1 si O gana, 0 si hay empate.\"\"\"\n",
        "    win = winner(board)\n",
        "    if win == X:\n",
        "        return 1\n",
        "    elif win == O:\n",
        "        return -1\n",
        "    return 0\n",
        "\n",
        "\n",
        "def minimax(board):\n",
        "    \"\"\"Devuelve la mejor acción para el jugador actual utilizando el algoritmo Minimax.\"\"\"\n",
        "    if terminal(board):\n",
        "        return None\n",
        "    current_player = player(board)\n",
        "    if current_player == X:\n",
        "        _, best_action = max_value(board)\n",
        "    else:\n",
        "        _, best_action = min_value(board)\n",
        "    return best_action\n",
        "\n",
        "\n",
        "def max_value(board):\n",
        "    if terminal(board):\n",
        "        return utility(board), None\n",
        "    v = -math.inf\n",
        "    best_action = None\n",
        "    for action in actions(board):\n",
        "        val, _ = min_value(result(board, action))\n",
        "        if val > v:\n",
        "            v = val\n",
        "            best_action = action\n",
        "    return v, best_action\n",
        "\n",
        "\n",
        "def min_value(board):\n",
        "    if terminal(board):\n",
        "        return utility(board), None\n",
        "    v = math.inf\n",
        "    best_action = None\n",
        "    for action in actions(board):\n",
        "        val, _ = max_value(result(board, action))\n",
        "        if val < v:\n",
        "            v = val\n",
        "            best_action = action\n",
        "    return v, best_action\n",
        "\n",
        "\n",
        "def print_board(board):\n",
        "    \"\"\"Imprime el tablero de forma legible.\"\"\"\n",
        "    for row in board:\n",
        "        print(\" | \".join([cell if cell is not None else \" \" for cell in row]))\n",
        "        print(\"-\" * 5)\n",
        "\n",
        "\n",
        "def play_game():\n",
        "    \"\"\"Simula un juego completo entre dos jugadores (X e IA).\"\"\"\n",
        "    board = initial_state()\n",
        "    while not terminal(board):\n",
        "        print_board(board)\n",
        "        current_player = player(board)\n",
        "        print(f\"Turno del jugador: {current_player}\")\n",
        "\n",
        "        if current_player == X:  # Jugador X\n",
        "            i, j = map(int, input(\"Introduce tu movimiento (fila columna): \").split())\n",
        "            if (i, j) not in actions(board):\n",
        "                print(\"Movimiento inválido, intenta de nuevo.\")\n",
        "                continue\n",
        "            board = result(board, (i, j))\n",
        "        else:  # Jugador O (IA)\n",
        "            print(\"La IA está pensando...\")\n",
        "            action = minimax(board)\n",
        "            board = result(board, action)\n",
        "            print(f\"La IA juega en {action[0]} {action[1]}\")\n",
        "\n",
        "    print_board(board)\n",
        "    winner_player = winner(board)\n",
        "    if winner_player:\n",
        "        print(f\"¡El ganador es {winner_player}!\")\n",
        "    else:\n",
        "        print(\"El juego ha terminado en empate.\")\n",
        "\n",
        "\n",
        "# Iniciar el juego\n",
        "if __name__ == \"__main__\":\n",
        "    play_game()"
      ]
    }
  ]
}